#BlueJ class context
comment0.target=Election
comment1.params=filename
comment1.target=Election(java.lang.String)
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ Election.\n\ Creates\ the\ three\ field\ objects.\n
comment2.params=k
comment2.target=Election(int)
comment2.text=\n\ Constructor\ for\ objects\ of\ class\ Election\ with\ default\ files.\n\ It\ uses\ k\ to\ select\ from\ the\ sample\ input\ files.\n
comment3.params=
comment3.target=java.util.ArrayList\ getCandidates()
comment3.text=\n\ Returns\ the\ candidates\ list.\n
comment4.params=
comment4.target=java.util.ArrayList\ getPapers()
comment4.text=\n\ Returns\ the\ papers\ list.\n
comment5.params=
comment5.target=java.util.ArrayList\ getFile()
comment5.text=\n\ Returns\ the\ read-in\ file\ contents.\n
comment6.params=
comment6.target=void\ processFile()
comment6.text=\n\ Use\ the\ file\ information\ to\ initialise\ the\ other\ two\ fields.\n\ Reads\ the\ candidates,\ then\ discards\ exactly\ one\ blank\ line,\ then\ reads\ the\ voting\ papers.\n\ See\ the\ sample\ input\ files\ for\ examples\ of\ the\ format.\n
comment7.params=
comment7.target=int\ conductCount()
comment7.text=\n\ Adds\ each\ formal\ vote\ to\ each\ candidate,\ both\ numbers\ of\ votes\ and\ numbers\ of\ wins.\n\ Returns\ the\ number\ of\ informal\ votes.\n
comment8.params=
comment8.target=java.lang.String\ getStandings()
comment8.text=\n\ Returns\ and\ prints\ a\ summary\ of\ the\ election\ result.\ \n\ See\ the\ sample\ output\ files\ for\ the\ required\ format.\ \n
comment9.params=
comment9.target=Candidate\ winner()
comment9.text=\n\ Returns\ the\ winner\ of\ the\ election.\ \n\ Selects\ the\ candidate\ with\ the\ highest\ number\ of\ votes;\ if\ multiple\ \n\ candidates\ are\ equal,\ selects\ the\ one\ with\ the\ highest\ number\ of\ wins.\ \n
numComments=10
